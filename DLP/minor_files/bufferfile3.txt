using Newtonsoft.Json;
using System;
using System.Diagnostics.Eventing.Reader;
using System.IO;
using System.Net.Http;
using System.Text;
using System.Text.Json;

class Program2
{
    private static readonly HttpClient client = new HttpClient();

    public static void SendLogsToServer(string logs)
    {
        string apiUrl = "http://localhost:3000/receive-logs";

        try
        {
            var content = new StringContent(logs);
            var response = client.PostAsync(apiUrl, content).Result;

            if (response.IsSuccessStatusCode)
            {
                Console.WriteLine("Logs sent successfully.");
            }
            else
            {
                Console.WriteLine($"Failed to send logs. Status Code: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error sending logs: {ex.Message}");
        }
    }

    private static string GatherLogs(EventLogQuery query)
    {
        string volumeInfo = "";
        try
        {
            // Create an EventLogReader to read events based on the query
            using (EventLogReader reader = new EventLogReader(query))
            {
                EventRecord eventRecord;

                while ((eventRecord = reader.ReadEvent()) != null)
                {
                    Console.WriteLine($"Event ID: {eventRecord.Id}");
                    Console.WriteLine($"Provider Name: {eventRecord.ProviderName}");
                    Console.WriteLine($"Time Created: {eventRecord.TimeCreated}");
                    Console.WriteLine($"Message: {eventRecord.FormatDescription()}");

                    // Additional code to extract and display volume information if available
                    volumeInfo = GetVolumeInfo(eventRecord);
                    if (!string.IsNullOrEmpty(volumeInfo))
                    {
                        Console.WriteLine($"Volume Info: {volumeInfo}");
                    }

                    Console.WriteLine();
                }
            }
        }
        catch (EventLogNotFoundException)
        {
            Console.WriteLine("The specified event log was not found.");
        }
        catch (EventLogException ex)
        {
            Console.WriteLine($"Error reading the event log: {ex.Message}");
        }

        return volumeInfo;
    }



    public class EventLogData
    {
        public string EventType { get; set; }
        public int EventID { get; set; }
        public string ProviderName { get; set; }
        public DateTime TimeCreated { get; set; }
        public string Message { get; set; }
        public string VolumeInfo { get; set; }
    }


    private static string GetVolumeInfo(EventRecord eventRecord)
    {
        foreach (EventProperty property in eventRecord.Properties)
        {
            if (property.Value != null && property.Value is string)
            {
                string propertyName = property.Value.ToString();

                // Replace "VolumeInfo" with the actual property name that contains the volume information
                if (propertyName.Equals("VolumeInfo", StringComparison.OrdinalIgnoreCase))
                {
                    return property.Value.ToString();
                }
            }
        }

        return string.Empty; // in case nothing is found
    }

    public static void ChangeDetector(string driverVolume, string ntfsVolume)
    {
        string pathToMonitor = string.IsNullOrEmpty(driverVolume) ? "F:\\" : driverVolume;

        // Check if the directory exists before setting up the FileSystemWatcher
        if (!Directory.Exists(pathToMonitor))
        {
            Console.WriteLine($"Directory does not exist: {pathToMonitor}");
            return;
        }

        try
        {
            FileSystemWatcher watcher = new FileSystemWatcher(pathToMonitor);

            watcher.NotifyFilter = NotifyFilters.LastWrite | NotifyFilters.FileName | NotifyFilters.DirectoryName;

            watcher.Created += OnCreated;
            watcher.Deleted += OnDeleted;
            watcher.Changed += OnChanged;
            watcher.Renamed += OnRenamed;

            watcher.EnableRaisingEvents = true;

            Console.WriteLine($"Monitoring directory: {pathToMonitor}");
            Console.WriteLine("Press 'q' to quit.");

            while (Console.ReadKey().Key != ConsoleKey.Q) { }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error setting up FileSystemWatcher: {ex.Message}");
        }
    }

    private static void OnCreated(object sender, FileSystemEventArgs e)
    {
        Console.WriteLine($"File or directory created: {e.FullPath}");
    }

    private static void OnDeleted(object sender, FileSystemEventArgs e)
    {
        Console.WriteLine($"File or directory deleted: {e.FullPath}");
    }

    private static void OnChanged(object sender, FileSystemEventArgs e)
    {
        if (e.ChangeType != WatcherChangeTypes.Changed)
        {
            return;
        }
        Console.WriteLine($"Changed: {e.FullPath}");
    }

    private static void OnRenamed(object sender, RenamedEventArgs e)
    {
        Console.WriteLine($"File or directory renamed from {e.OldFullPath} to {e.FullPath}");
    }

    public static void Gather()
    {
        // Log path for DriverFrameworks-UserMode
        string driverLogPath = @"Microsoft-Windows-DriverFrameworks-UserMode/Operational";

        // Log path for NTFS
        string ntfsLogPath = @"Microsoft-Windows-Ntfs/Operational";

        // Calculate the start time (0 minutes ago) and end time (5 minutes ago)
        DateTime? endTimeNullable = DateTime.Now.Subtract(TimeSpan.FromMinutes(0));
        DateTime? startTimeNullable = DateTime.Now.Subtract(TimeSpan.FromMinutes(5));

        // Check for nullability and assign default values if needed
        DateTime endTime = endTimeNullable ?? DateTime.MinValue;
        DateTime startTime = startTimeNullable ?? DateTime.MinValue;

        // Format the time strings for the query
        string startTimeString = startTime.ToUniversalTime().ToString("o");
        string endTimeString = endTime.ToUniversalTime().ToString("o");

        // Create an EventLogQuery for DriverFrameworks-UserMode
        string driverQueryStr = $"*[System[(EventID=1006 or EventID=1008) and TimeCreated[@SystemTime >= '{startTimeString}' and @SystemTime <= '{endTimeString}']]]";
        EventLogQuery driverQuery = new EventLogQuery(driverLogPath, PathType.LogName, driverQueryStr);

        // Create an EventLogQuery for NTFS with Event ID '142'
        string ntfsQueryStr = $"*[System[(EventID=142) and TimeCreated[@SystemTime >= '{startTimeString}' and @SystemTime <= '{endTimeString}']]]";
        EventLogQuery ntfsQuery = new EventLogQuery(ntfsLogPath, PathType.LogName, ntfsQueryStr);

        // Gather logs for DriverFrameworks-UserMode
        string driverVolume = GatherLogs(driverQuery);

        // Gather logs for NTFS
        string ntfsVolume = GatherLogs(ntfsQuery);

        // Combine logs
        string combinedLogs = $"{driverVolume}\n{ntfsVolume}";

        // Send logs to the server
        SendLogsToServer(combinedLogs);

        // check for change
        ChangeDetector(driverVolume, ntfsVolume);
    }


    static void Main(string[] args)
    {
        // Run Gather in a loop every 30 seconds
        while (true)
        {
            Gather();
            // Sleep for 30 seconds before checking again
            System.Threading.Thread.Sleep(TimeSpan.FromSeconds(30));
        }
    }
}
